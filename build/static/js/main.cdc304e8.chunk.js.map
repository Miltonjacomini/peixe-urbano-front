{"version":3,"sources":["services/api.js","components/posts/form.component.js","components/posts/Post.js","components/posts/index.component.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Form","props","onChangeAuthor","bind","onChangeContent","onSubmit","state","author","content","votes","e","this","setState","target","value","preventDefault","obj","api","post","then","res","updateList","data","className","style","marginTop","align","class","for","aria-hidden","type","id","placeholder","onChange","rows","Component","Post","upvote","downvote","put","console","log","refresh","catch","err","onClick","Index","refreshList","findAllPosts","get","response","posts","error","object","map","i","key","postGrid","App","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cdc304e8.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  // baseURL: \"https://segware-backend.herokuapp.com/api\"\n  baseURL: \"http://localhost:8080/api\"\n});\n\nexport default instance;","import React, { Component } from 'react';\nimport api from '../../services/api';\n\nexport default class Form extends Component {\n  constructor(props) {\n    super(props);\n    this.onChangeAuthor = this.onChangeAuthor.bind(this);\n    this.onChangeContent = this.onChangeContent.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n\n    this.state = {\n      author: '',\n      content: '',\n      votes: ''\n    }\n  }\n  onChangeAuthor(e) {\n    this.setState({\n      author: e.target.value\n    });\n  }\n  onChangeContent(e) {\n    this.setState({\n      content: e.target.value\n    })  \n  }\n  \n  onSubmit(e) {\n    e.preventDefault();\n    const obj = {\n      author: this.state.author,\n      content: this.state.content,\n      votes: 0\n    };\n\n    api.post('/post', obj)\n        .then(res => {\n            this.props.updateList(res.data);\n        });\n    \n    this.setState({\n      author: '',\n      content: ''\n    })\n  }\n \n  render() {\n    return (\n        <div className=\"container-fluid\" style={{ marginTop: 10 }}>\n            <h3 align=\"center\">Adicionar Post</h3>\n            <form onSubmit={this.onSubmit}>\n              <div className=\"row\">\n                <div class=\"form-group form-post div-center\">\n                    <label class=\"sr-only\" for=\"subject\">Subject</label>\n                    <div class=\"input-group\">\n                      <div class=\"input-group-addon\">\n                          <span class=\"glyphicon glyphicon-info-sign\" aria-hidden=\"true\"></span>\n                      </div>\n                      <input type=\"text\" class=\"form-control form-input\" id=\"author\" placeholder=\"Author\" \n                          value={this.state.author} onChange={this.onChangeAuthor}/>\n                    </div>\n                    <div class=\"form-group\">\n                    <label class=\"sr-only\" for=\"content\">Content</label>\n                    <textarea class=\"form-control\" id=\"content\" rows=\"6\" placeholder=\"Content\" value={this.state.content}\n                        onChange={this.onChangeContent} />\n                    </div>\n                    <button type=\"submit\" class=\"btn btn-primary submit form-button\">\n                      Adicionar\n                    </button>\n                </div>\n                \n              </div>\n              {/* <div class=\"btn-group pull-right\" role=\"group\">\n                  \n              </div> */}\n            </form>\n        </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport api from '../../services/api';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\n\nclass Post extends Component {\n\n    constructor(props) {\n        super(props);\n        this.upvote = this.upvote.bind(this);\n        this.downvote = this.downvote.bind(this);\n    }\n\n    upvote() {\n        api.put(`/post/${this.props.obj.id}/upvote`)\n            .then(() => {\n                console.log('Upvoting')\n                this.props.refresh();\n            })\n            .catch(err => console.log(err))\n    }\n\n    downvote() {\n        api.put(`/post/${this.props.obj.id}/downvote`)\n            .then(() => {\n                console.log('Downvoting');\n                this.props.refresh();\n            })\n            .catch(err => console.log(err))\n    }\n\n    render() {\n        return (\n            <div class=\"col-md-8 col-lg-8 div-center post-card\">\n                <article>\n                    <h5 className=\"post_title\">\n                        {this.props.obj.author}\n                    </h5>\n                    <div className=\"post_votes\">\n                        votos: {this.props.obj.votes}\n                    </div>\n                    <div className=\"post_content\">\n                        <p>{this.props.obj.content}</p>\n                    </div>\n                    <div className=\"post-buttons\">\n                        <ArrowUpwardIcon className=\"vote-up\" onClick={this.upvote} />\n                        <ArrowDownwardIcon className=\"vote-down\"  onClick={this.downvote} />\n                    </div>\n                </article>\n            </div>\n        );\n    }\n}\n\nexport default Post;","import React, { Component } from 'react';\nimport Form from './form.component';\nimport api from '../../services/api';\nimport Post from './Post';\n\nimport './css/components.scss';\n\nexport default class Index extends Component {\n\n  constructor(props) {\n      super(props);\n      this.state = {posts: []};\n\n      this.updateList = this.updateList.bind(this);\n      this.findAllPosts = this.findAllPosts.bind(this);\n      this.refreshList = this.refreshList.bind(this);\n      \n    }\n    componentDidMount(){\n      this.findAllPosts();\n    }\n\n    refreshList = () => {\n      this.findAllPosts();\n    }\n\n    findAllPosts = () => {\n      api.get('/posts')\n        .then(response => {\n          this.setState({ posts: response.data });\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n\n    postGrid(refreshList){\n      return this.state.posts.map(function(object, i) {\n          return <Post obj={object} key={i} refresh={refreshList} />;\n      });\n    }\n\n    updateList = (object) => {\n        this.setState({\n            posts: [...this.state.posts, object]\n        });\n    }\n\n    render() {\n      return (\n        <div>\n          \n          <Form updateList={this.updateList} />\n          \n          <div className=\"row mg-top\">\n            { this.postGrid(this.refreshList) }\n          </div>\n        </div>\n      );\n    }\n  }","import React from 'react';\n\nimport Index from './components/posts/index.component';\nimport { BrowserRouter as Router, Link } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div className=\"container\">\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <Link to={'/'} className=\"navbar-brand\">Posts da Segware</Link>\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n              <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item\">\n                  <Link to={'/'} className=\"nav-link\">Home</Link>\n                </li>\n              </ul>\n            </div>\n          </nav>\n          <br/>\n\n          <Index />\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}